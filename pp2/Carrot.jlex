import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int lineNum, int chNum) {
        linenum = lineNum;
        charnum = chNum;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lineNum, int chNum, int val) {
        super(lineNum, chNum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lineNum, int chNum, String val) {
        super(lineNum, chNum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lineNum, int chNum, String val) {
        super(lineNum, chNum);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
IDENTIFIER = [A-Za-z_][A-Za-z0-9_]*

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.
            String input = yytext();
            int val;
            if (input.length() > 12) {
              ErrMsg.warn(yyline+1, CharNum.num, "integer literal too large");
              val = Integer.MAX_VALUE;
            } else {
              long temp = Long.valueOf(yytext());
              if (temp > Integer.MAX_VALUE) {
                ErrMsg.warn(yyline+1, CharNum.num, "integer literal too large");
                val = Integer.MAX_VALUE;
              } else {
                val = (int)temp;
              }
            }
            Symbol S = new Symbol(sym.INTLITERAL,
                             new IntLitTokenVal(yyline+1, CharNum.num, val));
            CharNum.num += yytext().length();
            return S;
          }

\n        { CharNum.num = 1; }
\t        { CharNum.num = 1; }
"///"*	  { CharNum.num += yytext().length(); }
"##"*	    { CharNum.num += yytext().length(); }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"bool"    { Symbol S = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"int"     { Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }         

"void"    { Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"true"    { Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"false"   { Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }          

"struct"  { Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          } 

"cin"  { Symbol S = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }   

"cout"  { Symbol S = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"if"  { Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"else"  { Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"while"  { Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }          

"return"  { Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }  

{IDENTIFIER}  { Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num++;
            return S;
          }                                                       

"{"			{	Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
				  return S;
			  }

"}"			{	Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"("			{ 	Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
			  }

")"			{ 	Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

";"			{ 	Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

","			{ 	Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"."			{ 	Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"<<"		{ 	Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

">>"		{ 	Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"++"		{ 	Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"--"		{ 	Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"+"     {	Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            	CharNum.num++;
            	return S;
        }

"-"			{ 	Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"*"			{ 	Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"/"			{ 	Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"!"			{ 	Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"&&"		{ 	Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"||"		{ 	Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"=="		{ 	Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"!="		{ 	Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"<"			{ 	Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

">"			{ 	Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

"<="		{ 	Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

">="		{ 	Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num = CharNum.num + 2;
		  		return S;
		 	  }

"="			{ 	Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
		  		CharNum.num++;
		  		return S;
		 	  }

\"(([\\]([nt'\"?\\]))*\"   {
                            Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
                            CharNum.num += yytext().length();
                            return S;
                           }

\"(([\\]([nt'\"?\\]))*     {	// unterminated string
                              ErrMsg.warn(yyline+1, CharNum.num, "unterminated string literal ignored");
                           }

\"([\\][^nt'\"?\\])*      {	// bad escaped character
                            ErrMsg.warn(yyline+1, CharNum.num, "string literal with bad escaped character ignored");
                          }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }         
